name: docker Image compose test
description: docker Image compose test
inputs:
  base_path:
    description: base path will be src
    required: false
    default: src
  compose_file:
    description: compose config file
    required: false
    default: docker-compose.yaml
  timeout:
    description: timeout to wait
    required: false
    default: 300
  pull_image:
    description: pull image before test
    required: false
    default: true

runs:
  using: composite
  steps:
    - id: check_health
      shell: bash
      run: |
        cd ${{ github.workspace }}
        cd ${{ inputs.base_path }}
        docker system prune -a -f > /dev/null
        echo "cleaned"

        if [ "${{ inputs.pull_image }}" == "true" ]; then
          docker compose pull -q
          echo "pulled"
        fi

        docker compose -f ${{ inputs.compose_file }} up -d

        # Timeout in seconds
        TIMEOUT=${{ inputs.timeout }}
        START_TIME=$(date +%s)
        END_TIME=$((START_TIME + TIMEOUT))
        SLEEP_INTERVAL=5

        # Function to check health status of all services
        check_services_status() {
            services=$(docker compose config --services)
            all_started=true
            any_unhealthy=false

            for service in $services; do
                health_status=$(docker inspect --format='{{.State.Health.Status}}' "$(docker compose ps -q $service)" 2>/dev/null)

                if [ "$health_status" = "" ]; then
                    continue
                fi
                if [ "$health_status" = "starting" ]; then
                    all_started=false
                    break
                fi
                if [ "$health_status" = "unhealthy" ]; then
                    any_unhealthy=true
                    break
                fi
            done

            if [ "$all_started" = true ] && [ "$any_unhealthy" = false ]; then
                echo "healthy"
            elif [ "$any_unhealthy" = true ]; then
                echo "unhealthy"
            else
                echo "waiting"
            fi
        }

        # Main loop to check service health statuses
        while true; do
            status=$(check_services_status)

            if [ "$status" = "healthy" ]; then
                echo "All services are healthy."
                exit 0
            elif [ "$status" = "unhealthy" ]; then
                echo "At least one service is unhealthy."
                docker compose -f ${{ inputs.compose_file }} logs
                exit 1
            fi

            if [ "$(date +%s)" -ge "$END_TIME" ]; then
                echo "Timeout reached. Following services did not become healthy:"
                for service in $services; do
                    health_status=$(docker inspect --format='{{.State.Health.Status}}' "$(docker compose ps -q $service)" 2>/dev/null)
                    echo "Service: $service, Health Status: ${health_status:-no-healthcheck}"
                done
                exit 1
            fi

            sleep $SLEEP_INTERVAL
        done

    - shell: bash
      run: |
        cd ${{ github.workspace }}
        cd ${{ inputs.base_path }}
        trap "echo 'Timeout reached, cleaning up...' && docker compose down -v" EXIT
        # docker compose exec -t desktop bash -c "chmod 644 /root/.ssh/config && autossh -M 0 -o StrictHostKeyChecking=no -N -R 80:localhost:3000 serveo.net"
        docker compose exec -t desktop script -qfc "chmod 644 /root/.ssh/config && autossh -M 0 -o StrictHostKeyChecking=no -N -R 80:localhost:3000 serveo.net" /dev/null
